// A tab has been selected
void MainWindow::on_tabWidget_tabBarClicked(int index)
{
   if (index != currentTab)
   {
       // Plotting magnetic data from all sensors
       if (index == SENSOROUTPUTS)
       {
           sensorPlotTimer.start(10);
           sensorPlot->replot();
       }
       // Calibration
       else if (index == CALIBRATION)
       {

       }
       // Localization (error mapping)
       else if (index == LOCALIZATION_ERROR)
       {
           //Currently not being used

//            if (load_cal)
//            {
//                load_cal = false;
//                loadCalibration(magnet, "C:/TTS/tts_gui_experiment/input/calibration.xml",false);
//                // Set lcd information
//                ui->lcdNumber->setDigitCount(10);
//                ui->lcdNumber_2->setDigitCount(10);
//                ui->lcdNumber_3->setDigitCount(10);
//                ui->lcdNumber_4->setDigitCount(10);
//                ui->lcdNumber_5->setDigitCount(10);
//                ui->lcdNumber_6->setDigitCount(10);
//                ui->lcdNumber_7->setDigitCount(20);
//            }

       }
       // Data Collection
       else if (index == LOCALIZATION_EXPERIMENT)
       {
           video->Play();
           audioTimer.start(0);

           ui->measureEMFButton->setText("Measure EMF");
           ui->measureEMFButton->setEnabled(true);

           ui->startStopTrialButton->setEnabled(false);
           ui->startStopTrialButton->setChecked(false);

           // Set and Launch Visual Feedback Matlab program
//            visualFB.start("C:/TTS_GUI/tts_gui_experiment/VisualFB.exe");
           updateMlGui(0);
       }

       if (index != SENSOROUTPUTS)
       {
           sensorPlotTimer.stop();
       }
       if (index != LOCALIZATION_EXPERIMENT)
       {
           audioTimer.stop();
           video->Stop();
           visualFB.close(); // Close Visual Feedback GUI
       }

       currentTab = index;
   }

}


/* **************************************************** *
*              Experiment Tab                          *
* **************************************************** */

void MainWindow::beginTrial()
{
   //Color the boxes
   ui->wordBrowser->setText(QString("<font size=\"34\" color=\"red\">")+words_p.at(ui->classBox->currentIndex())->at(ui->wordBox->currentIndex())+QString("</font>"));
   ui->koreanBrowser->setText(QString("<font size=\"34\" color=\"red\">")+inKorean.at(ui->classBox->currentIndex())->at(ui->wordBox->currentIndex())+QString("</font>"));

   // Set filenames of output data
   audio1->setOutputLocation(experiment_output_path + "_audio1");          // Audio stream 1
   audio2->setOutputLocation(experiment_output_path + "_audio2");          // Audio stream 2
   video->setVideoName(experiment_output_path + "_video.avi");             // Video stream
   rs->setFileLocationAndName(experiment_output_path + "_raw_sensor.txt"); // Magnetic stream
   lt->setFileLocationAndName(experiment_output_path + "_localization.txt");  // Tongue Trajectory
   lt->setSensorFile(experiment_output_path + "_raw_sensor.txt");

   // Post processing files
   ps->setReferenceFile(reference_input_path + "_localization.txt");
   ps->setExperimentalFile(experiment_output_path + "_localization.txt");


   // Begin Recording data
   key_start = QDateTime::currentDateTime().toMSecsSinceEpoch();
   audio1->beginSavingAudio();
   audio2->beginSavingAudio();
   video->startVideo();

   if (MOJO)
   {
       rs->saveToFile();
       lt->saveToFile();
   }

   // Others
   updateMlGui(1);                     // Update VFB XML file
}

void MainWindow::stopTrial()
{
   key_end =  QDateTime::currentDateTime().toMSecsSinceEpoch();

   if (MOJO)
   {
       rs->stopSavingToFile();
   }

   audio1->endSavingAudio();
   audio2->endSavingAudio();
   video->endVideo();

   ui->wordBrowser->setText(QString("<font size=\"40\">")+words_p.at(ui->classBox->currentIndex())->at(ui->wordBox->currentIndex())+QString("</font>"));
   ui->koreanBrowser->setText(QString("<font size=\"40\">")+inKorean.at(ui->classBox->currentIndex())->at(ui->wordBox->currentIndex())+QString("</font>"));

   // Normalize raw magnetic data
   QString rawMagFileLoc = rs->filename;
   normalizeRawMag(rawMagFileLoc);

   // Post Process Localization
   if (MOJO)
   {
       lt->Play();
       while(lt->isRunning());
       lt->stopSavingToFile();
   }

   // Playback recorded speech
   try {
       QSound::play(experiment_output_path + "_audio1.wav");
   }
   catch(...) {
       qDebug() << "QSound cannot be played for output path: " << experiment_output_path;
   }

   // Generate bio-feedback
   if (REFERENCE_AVAILABLE) {
       ps->processTrajectories();
   }

   // All data has been recorded/processed. Move to next trial
   moveToNextTrial();
}

void MainWindow::moveToNextTrial()
{
   bool ended = false;
   int indexExp = ui->expNoBox->currentIndex();
   if (indexExp != ui->expNoBox->count()-1)
   {
       ui->expNoBox->setCurrentIndex(indexExp+1);
   }
   else
   {
       int indexWord = ui->wordBox->currentIndex();
       if (indexWord != ui->wordBox->count()-1)
       {
           ui->wordBox->setCurrentIndex(indexWord+1);
       }
       else
       {
           //Done with word list
           int indexClass = ui->classBox->currentIndex();
           if (indexClass != ui->classBox->count()-1)
           {
               ui->classBox->setCurrentIndex(indexClass+1);
           }
           else
           {
               ended = true;
           }
       }
   }

   if (!ended)
   {
       ui->wordBrowser->setText(QString("<font size=\"40\">")+words_p.at(ui->classBox->currentIndex())->at(ui->wordBox->currentIndex())+QString("</font>"));
       ui->koreanBrowser->setText(QString("<font size=\"40\">")+inKorean.at(ui->classBox->currentIndex())->at(ui->wordBox->currentIndex())+QString("</font>"));
       ui->meaningBrowser->setText(QString("<font size=\"20\">")+meaning.at(ui->classBox->currentIndex())->at(ui->wordBox->currentIndex())+QString("</font>"));
   }

   // Update output and reference folders
   setOutputAndRefPaths();

   if (!ui->playReferenceButton->isEnabled()) {
       ui->playReferenceButton->setEnabled(true);
   }
}


void MainWindow::on_playReferenceButton_clicked()
{
   QString t = reference_input_path;
   t = formatRefFilename(t);

   t = t + "_audio1.wav";

   // NS: Verify if reference sound file exist
   QFileInfo checkFile(t);
   if (checkFile.exists() && checkFile.isFile())
   {
       QSound::play(t);
       ui->playReferenceButton->setEnabled(false);
       delay(1);
       ui->playReferenceButton->setEnabled(true);
   }
   else
   {
       qDebug() << "Reference file does not exist";
   }
   // end changes

   //NS: Re-enabling playReference
   ui->playReferenceButton->setEnabled(true);
   //end changes
}

void MainWindow::updatePlayerUI(QImage img)
{
   if (!img.isNull())
   {
       ui->video_label->setAlignment(Qt::AlignCenter);
       ui->video_label->setPixmap(QPixmap::fromImage(img).scaled(ui->video_label->size(),
                                  Qt::KeepAspectRatio, Qt::FastTransformation));
   }
}

void MainWindow::on_classBox_currentIndexChanged(int index)
{

   if (!setupExperiment_log)
   {
       clearLog = true;
       ui->wordBox->clear();
       clearLog = false;

       for(int j=0; j<words_p.at(index)->size(); j++)
       {
           ui->wordBox->addItem(words_p.at(index)->at(j));
       }

       clearLog = true;
       ui->expNoBox->clear();
       clearLog = false;

       for (int k=0; k<expRepeat.at(index); k++)
       {
           ui->expNoBox->addItem(QString::number(k+1));
       }
       ui->wordBrowser->setText(QString("<font size=\"40\">")+words_p.at(ui->classBox->currentIndex())->at(ui->wordBox->currentIndex())+QString("</font>"));
       ui->koreanBrowser->setText(QString("<font size=\"40\">")+inKorean.at(ui->classBox->currentIndex())->at(ui->wordBox->currentIndex())+QString("</font>"));
       ui->meaningBrowser->setText(QString("<font size=\"20\">")+meaning.at(ui->classBox->currentIndex())->at(ui->wordBox->currentIndex())+QString("</font>"));

       // Update output and reference folders
       setOutputAndRefPaths();
   }


}

void MainWindow::on_wordBox_currentIndexChanged(int index)
{
   if (!setupExperiment_log && !clearLog)
   {
       ui->expNoBox->setCurrentIndex(0);
       ui->wordBrowser->setText(QString("<font size=\"40\">")+words_p.at(ui->classBox->currentIndex())->at(ui->wordBox->currentIndex())+QString("</font>"));
       ui->koreanBrowser->setText(QString("<font size=\"40\">")+inKorean.at(ui->classBox->currentIndex())->at(ui->wordBox->currentIndex())+QString("</font>"));
       ui->meaningBrowser->setText(QString("<font size=\"20\">")+meaning.at(ui->classBox->currentIndex())->at(ui->wordBox->currentIndex())+QString("</font>"));

       // Update output and reference folders
       setOutputAndRefPaths();
   }

}

void MainWindow::on_expNoBox_currentIndexChanged(int index)
{
   if (!setupExperiment_log && !clearLog)
   {
       // Update output and reference folders
       setOutputAndRefPaths();
   }

}


void MainWindow::updateAudioLevels()
{
   double vol1 = audio1->returnAudioLevel();
   double vol2 = audio2->returnAudioLevel();
   ui->leftVolumeBar->setValue(vol1 * 800);
   ui->rightVolumeBar->setValue(vol2 * 800);
}



/* **************************************************** *
*              Sensor Tab                              *
* **************************************************** */
void MainWindow::setupPlots()
{
   //Initialize sensorPlot with parent widget and add it the the layout structure
   sensorPlot = new QCustomPlot(ui->widgetPlots);
   sensorPlot->setObjectName(QStringLiteral("Sensor_Plots"));
   sensorPlot->plotLayout()->clear();
   ui->gridLayout->addWidget(sensorPlot, 0, 0, 1, 1);

   //Initialize different plots
   int i = -1;
   lead_dot = true;
   alias_fill = false;
   for (int l1=0; l1<NUM_ROWS_PLOTS; l1++)
   {
       for (int l2=0; l2<NUM_COLS_PLOTS; l2++)
       {
           i++;

           plots[i].wideAxisRect = new QCPAxisRect(sensorPlot);
           plots[i].wideAxisRect->setupFullAxesBox(true);
           plots[i].wideAxisRect->setupFullAxesBox(true);
           sensorPlot->plotLayout()->addElement(l1, l2, plots[i].wideAxisRect);

           // create and configure plottables:
           plots[i].mainGraphX = sensorPlot->addGraph(plots[i].wideAxisRect->axis(QCPAxis::atBottom), plots[i].wideAxisRect->axis(QCPAxis::atLeft));
           plots[i].mainGraphY = sensorPlot->addGraph(plots[i].wideAxisRect->axis(QCPAxis::atBottom), plots[i].wideAxisRect->axis(QCPAxis::atLeft));
           plots[i].mainGraphZ = sensorPlot->addGraph(plots[i].wideAxisRect->axis(QCPAxis::atBottom), plots[i].wideAxisRect->axis(QCPAxis::atLeft));

           plots[i].mainGraphX->setPen(QPen(Qt::blue));
           plots[i].mainGraphY->setPen(QPen(Qt::red));
           plots[i].mainGraphZ->setPen(QPen(Qt::green));

           plots[i].check1 = 0;
           plots[i].check2 = 0;
           plots[i].working = 0;

           if (lead_dot)
           {
               plots[i].mainGraphXDot = sensorPlot->addGraph(plots[i].wideAxisRect->axis(QCPAxis::atBottom), plots[i].wideAxisRect->axis(QCPAxis::atLeft));
               plots[i].mainGraphYDot = sensorPlot->addGraph(plots[i].wideAxisRect->axis(QCPAxis::atBottom), plots[i].wideAxisRect->axis(QCPAxis::atLeft));
               plots[i].mainGraphZDot = sensorPlot->addGraph(plots[i].wideAxisRect->axis(QCPAxis::atBottom), plots[i].wideAxisRect->axis(QCPAxis::atLeft));

               //X Dot
               plots[i].mainGraphXDot->setPen(QPen(Qt::blue));
               plots[i].mainGraphXDot->setLineStyle(QCPGraph::lsNone);
               plots[i].mainGraphXDot->setScatterStyle(QCPScatterStyle::ssDisc);

               //Y Dot
               plots[i].mainGraphYDot->setPen(QPen(Qt::red));
               plots[i].mainGraphYDot->setLineStyle(QCPGraph::lsNone);
               plots[i].mainGraphYDot->setScatterStyle(QCPScatterStyle::ssDisc);

               //Z Dot
               plots[i].mainGraphZDot->setPen(QPen(Qt::green));
               plots[i].mainGraphZDot->setLineStyle(QCPGraph::lsNone);
               plots[i].mainGraphZDot->setScatterStyle(QCPScatterStyle::ssDisc);
           }

           if (alias_fill)
           {
               plots[i].mainGraphX->setBrush(QBrush(QColor(240, 0, 0)));
               plots[i].mainGraphX->setAntialiasedFill(false);
               plots[i].mainGraphY->setBrush(QBrush(QColor(0, 255, 0)));
               plots[i].mainGraphY->setAntialiasedFill(false);
               plots[i].mainGraphZ->setBrush(QBrush(QColor(0, 0, 200)));
               plots[i].mainGraphZ->setAntialiasedFill(false);
           }

           plots[i].wideAxisRect->axis(QCPAxis::atLeft)->setRange(-RANGE_VALS, RANGE_VALS);
           plots[i].wideAxisRect->axis(QCPAxis::atTop)->setLabelColor(QColor(0, 0, 255));
           plots[i].wideAxisRect->axis(QCPAxis::atTop)->setLabel("Sensor " + QString::number(i+1));
           plots[i].wideAxisRect->axis(QCPAxis::atBottom)->setAutoTicks(false);
       }
   }

   if (MOJO)
       connect(&sensorPlotTimer, SIGNAL(timeout()), this, SLOT(graphSensorData()));
   else
       connect(&sensorPlotTimer, SIGNAL(timeout()), this, SLOT(junkData()));
   sensorPlotTimer.start(0);
}

void MainWindow::graphSensorData()
{
   double x = 0;
   double y = 0;
   double z = 0;

   for (int i=0; i<NUM_OF_SENSORS;i++) // at most add point every 10 ms
   {
       //x axis data for real time update
       key = QDateTime::currentDateTime().toMSecsSinceEpoch()/1000.0;
       x = rs->getSensorData(i/4, i%4, 0);
       y = rs->getSensorData(i/4, i%4, 1);
       z = rs->getSensorData(i/4, i%4, 2);

       // add data to lines:
       plots[i].mainGraphX->addData(key, x);
       plots[i].mainGraphY->addData(key, y);
       plots[i].mainGraphZ->addData(key, z);

       // remove data of lines that's outside visible range:
       plots[i].mainGraphX->removeDataBefore(key-8);
       plots[i].mainGraphY->removeDataBefore(key-8);
       plots[i].mainGraphZ->removeDataBefore(key-8);


       //Add leading dots
       if (lead_dot)
       {
           plots[i].mainGraphXDot->clearData();
           plots[i].mainGraphXDot->addData(key, x);
           plots[i].mainGraphYDot->clearData();
           plots[i].mainGraphYDot->addData(key, y);
           plots[i].mainGraphZDot->clearData();
           plots[i].mainGraphZDot->addData(key, z);
       }

       // make key axis range scroll with the data (at a constant range size of 8):
       plots[i].wideAxisRect->axis(QCPAxis::atBottom)->setRange(key+0.25, 8, Qt::AlignRight);

       //Check to see if sensor is working correctly

       plots[i].check2 = plots[i].check1;
       plots[i].check1 = x;

       if (plots[i].check2-plots[i].check1 == 0)
           plots[i].working++;
       else if(plots[i].working>0)
           plots[i].working--;

       if (plots[i].working >SENSOR_WORKING_THRESHOLD)
       {
           plots[i].wideAxisRect->axis(QCPAxis::atBottom)->setLabelColor(QColor(255, 0, 0));
           if (plots[i].working%20 == 0)
               plots[i].wideAxisRect->axis(QCPAxis::atBottom)->setLabel(" ");
           else if (plots[i].working%10 == 0)
               plots[i].wideAxisRect->axis(QCPAxis::atBottom)->setLabel("NOT WORKING");

       }
       else
       {
           plots[i].wideAxisRect->axis(QCPAxis::atBottom)->setLabelColor(QColor(0, 0, 255));
           //plots[i].wideAxisRect->axis(QCPAxis::atBottom)->setLabel("WORKING CORRECTLY @ " + QString::number(1.0/(key-plots[i].key)));
           plots[i].wideAxisRect->axis(QCPAxis::atBottom)->setLabel("WORKING CORRECTLY");
       }

       plots[i].key = key;
   }

   sensorPlot->replot();

}


/***************************************************** *
 *              Other Methods                                *
 * ********************************************************* */



void MainWindow::junkData()
{
   for (int i=0; i<NUM_OF_SENSORS;i++) // at most add point every 10 ms
   {
       //x axis data for real time update
       double key = QDateTime::currentDateTime().toMSecsSinceEpoch()/1000.0;

       //junk data
       double x = 33000/2*qSin(key);
       double y = 33000/2*qCos(key);
       double z = x+y;

       //Fake sensors that are "not" working
       if ((i+1)%3==0)
           x = 0;

       // add data to lines:
       plots[i].mainGraphX->addData(key, x);
       plots[i].mainGraphY->addData(key, y);
       plots[i].mainGraphZ->addData(key, z);

       // remove data of lines that's outside visible range:
       plots[i].mainGraphX->removeDataBefore(key-8);
       plots[i].mainGraphY->removeDataBefore(key-8);
       plots[i].mainGraphZ->removeDataBefore(key-8);


       //Add leading dots
       if (lead_dot)
       {
           plots[i].mainGraphXDot->clearData();
           plots[i].mainGraphXDot->addData(key, x);
           plots[i].mainGraphYDot->clearData();
           plots[i].mainGraphYDot->addData(key, y);
           plots[i].mainGraphZDot->clearData();
           plots[i].mainGraphZDot->addData(key, z);
       }

       // make key axis range scroll with the data (at a constant range size of 8):
       plots[i].wideAxisRect->axis(QCPAxis::atBottom)->setRange(key+0.25, 8, Qt::AlignRight);

       //Check to see if sensor is working correctly

       plots[i].check2 = plots[i].check1;
       plots[i].check1 = x;

       if (plots[i].check2-plots[i].check1 == 0)
           plots[i].working++;
       else if(plots[i].working>0)
           plots[i].working--;

       if (plots[i].working >SENSOR_WORKING_THRESHOLD)
       {
           plots[i].wideAxisRect->axis(QCPAxis::atBottom)->setLabelColor(QColor(255, 0, 0));
           if (plots[i].working%200 == 0)
               plots[i].wideAxisRect->axis(QCPAxis::atBottom)->setLabel(" ");
           else if (plots[i].working%100 == 0)
               plots[i].wideAxisRect->axis(QCPAxis::atBottom)->setLabel("NOT WORKING");

       }
       else
       {
           plots[i].wideAxisRect->axis(QCPAxis::atBottom)->setLabelColor(QColor(0, 0, 255));
           plots[i].wideAxisRect->axis(QCPAxis::atBottom)->setLabel("WORKING CORRECTLY");
       }

   }
   sensorPlot->replot();

}